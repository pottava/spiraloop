name: Publish artifacts

on:
  push:
    branches:
    - main
    tags:
    - v*

jobs:
  test-api:
    name: Test API
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Make a mod directory
      run:  mkdir -p ~/go/pkg/mod
    - uses: actions/cache@v2
      id: cache
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-api-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-api-
    - name: Code generation from the spec
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ./api
      run: make codegen
    - name: Resolve dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ./api
      run: make deps
    - name: Run static code analysis and tests
      working-directory: ./api
      run: make test

  test-cli:
    name: Test CLI
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Make a mod directory
      run:  mkdir -p ~/go/pkg/mod
    - uses: actions/cache@v2
      id: cache
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-cli-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-cli-
    - name: Resolve dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ./cli
      run: make deps
    - name: Run static code analysis and tests
      working-directory: ./cli
      run: make test

  release-cli-binaries:
    name: Release CLI binaries
    if: startsWith(github.ref, 'refs/tags/')
    needs: test-cli
    runs-on: ubuntu-18.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Resolve dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ./cli
      run: make deps
    - name: Release
      uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        args: release --rm-dist
        workdir: cli
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
